generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  member
}

enum TaskStatus {
  pending
  in_progress
  completed
}

enum Priority {
  high
  medium
  low
}

model User {
  id        String         @id @default(uuid())
  name      String         @db.VarChar(100)
  email     String         @unique @db.VarChar(150)
  password  String         @db.VarChar(255)
  role      UserRole       @default(member)
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime?      @updatedAt @map("updated_at")

  teams     TeamMember[]
  tasks     Task[]         @relation("AssignedTasks")
  histories TaskHistory[]

  @@map("users")
}

model Team {
  id          String        @id @default(uuid())
  name        String        @db.VarChar(100)
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")

  members     TeamMember[]
  tasks       Task[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  teamId    String   @map("team_id")
  createdAt DateTime @default(now()) @map("created_at")

  user      User     @relation(fields: [userId], references: [id])
  team      Team     @relation(fields: [teamId], references: [id])

  @@unique([userId, teamId])
  @@map("team_members")
}

model Task {
  id          String      @id @default(uuid())
  title       String      @db.VarChar(200)
  description String?
  status      TaskStatus  @default(pending)
  priority    Priority    @default(medium)
  assignedTo  String?     @map("assigned_to")
  teamId      String?     @map("team_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime?   @updatedAt @map("updated_at")

  user        User?       @relation("AssignedTasks", fields: [assignedTo], references: [id])
  team        Team?       @relation(fields: [teamId], references: [id])
  history     TaskHistory[]

  @@map("tasks")
}

model TaskHistory {
  id        String      @id @default(uuid())
  taskId    String      @map("task_id")
  changedBy String?     @map("changed_by")
  oldStatus TaskStatus? @map("old_status")
  newStatus TaskStatus? @map("new_status")
  changedAt DateTime    @default(now()) @map("changed_at")

  task      Task        @relation(fields: [taskId], references: [id])
  user      User?       @relation(fields: [changedBy], references: [id])

  @@map("task_history")
}
